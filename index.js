/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const app = express();
const port = 3000;
app.use(express.json());

let users = [
  {
    id: 1,
    username: "alice",
    email: "alice@example.com",
    todos: [
      {
        id: 101,
        title: "Buy groceries",
        description: "Milk, Bread, Cheese, Eggs, Fruits",
        completed: false,
        dueDate: "2024-07-01T17:00:00Z",
        priority: "medium",
      },
      {
        id: 102,
        title: "Call Bob",
        description: "Discuss the new project timeline",
        completed: true,
        dueDate: "2024-06-29T14:00:00Z",
        priority: "high",
      },
    ],
  },
  {
    id: 2,
    username: "bob",
    email: "bob@example.com",
    todos: [
      {
        id: 201,
        title: "Finish documentation",
        description: "Complete API docs for the client review",
        completed: false,
        dueDate: "2024-07-05T12:00:00Z",
        priority: "high",
      },
      {
        id: 202,
        title: "Workout session",
        description: "1 hour of cardio and strength training",
        completed: false,
        dueDate: "2024-07-01T07:00:00Z",
        priority: "low",
      },
    ],
  },
  {
    id: 3,
    username: "carol",
    email: "carol@example.com",
    todos: [
      {
        id: 301,
        title: "Plan weekend trip",
        description: "Research hotels and activities for the weekend getaway",
        completed: false,
        dueDate: "2024-07-03T20:00:00Z",
        priority: "medium",
      },
    ],
  },
];

app.get("/todos", function (req, res) {
  let id = parseInt(req.query.id); //convert to integer
  let todoid = parseInt(req.query.todoID);
  if (!id || !todoid) {
    return res.status(400).json("Enter an ID number and todoid");
  }
  let user = users.find((u) => u.id === id);
  let todoItem = user.todos.find((todo) => todo.id === todoid);
  if (!user) {
    return res.status(404).json(`The id with id number ${id} not found `);
  }
  if (!todoItem) {
    return res
      .status(404)
      .json(`The todo with id number ${todoid} not found for user ${id}`);
  }
  let todos = user.todos.map((todo) => ({
    title: todo.title,
    description: todo.description,
  }));
  let specificTodo = {
    title: todoItem.title,
    description: todoItem.description,
    completed: todoItem.completed,
  };
  res.json({
    todos,
    specificTodo,
  });
});
app.post("/todos", function (req, res) {
  const {
    userId,
    title,
    description,
    completed = false,
    dueDate,
    priority,
  } = req.body;
  if (!userId || !title || !description || !dueDate || !priority) {
    return res.status(400).json({
      error:
        "Missing required fields: userId, title, description, dueDate, priority",
    });
  }
  const user = users.find((u) => u.id === userId);
  if (!user) {
    return res.status(404).json({ error: `User with id ${userId} not found` });
  }
  //Generate new todoid(alternative use forEach and it replaces for loop)
  let maxId = 0;
  for (let i = 0; i < user.todos.length; i++) {
    if (user.todos[i].id > maxId) {
      maxId = user.todos[i].id;
    }
  }
  const newTodoID = maxId + 1;
  const newTodo = {
    id: newTodoID,
    title,
    description,
    completed,
    dueDate,
    priority,
  };
  user.todos.push(newTodo);
  res
    .status(201)
    .json({ message: "New todo added successfully.", todo: newTodo });
});
app.put("/todos/:id",function(req,res){
  const todoId = parseInt(req.params.id);
  const { userId, title, completed, description } = req.body;
  if (!userId || !title || completed === undefined || !description) {
    return res.status(400).json({
      error: "Missing required fields: title, completed, userId, description",
    });
  }
  const user = users.find((u) => u.id === userId);
  if (!user) {
    return res.status(404).json({ error: `User  with id ${userId} not found` });
  }
  const todo = user.todos.find((t) => t.id === todoId);
  if (!todo) {
    return res.status(404).json({ error: `Todo with id ${todoId} not found` });
  }
  // Update the todo item
  todo.title = title;
  todo.completed = completed;
  todo.description = description;
  res.status(200).json({ message: "Todo updated successfully.", todo });
});
app.delete("/todos/:id",function(req,res){
  const todoId = parseInt(req.params.id);
  const { userId } = req.body;
  if (!userId) {
    return res.status(400).json({
      error: "Missing required fields: title, completed, userId, description",
    });
  }
  const user = users.find((u) => u.id === userId);
  if (!user) {
    return res.status(404).json({ error: `User  with id ${userId} not found` });
  }
  const todo = user.todos.find((t) => t.id === todoId);
  if (!todo) {
    return res.status(404).json({ error: `Todo with id ${todoId} not found` });
  }
   user.todos.splice(todo, 1);
    res.status(200).json({ message: `Todo with id ${todoId} deleted successfully.` });
})
  

app.listen(port, () => {
  console.log(`The port is running on ${port}`);
});
